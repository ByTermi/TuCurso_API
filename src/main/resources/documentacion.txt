openapi: 3.0.3
info:
  title: Proyecto Grupal API
  description: API para gestionar usuarios y publicaciones en una red social.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Servidor local
tags:
  - name: usuarios
    description: Operaciones relacionadas con usuarios
  - name: publicaciones
    description: Operaciones relacionadas con publicaciones
paths:
  /usuarios/crear:
    post:
      tags:
        - usuarios
      summary: Crear un nuevo usuario
      description: Crea un nuevo usuario en el sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: string
                example: "Usuario creado exitosamente"
        '400':
          description: No se pudo crear el usuario
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo crear el usuario"

  /usuarios/{id}:
    delete:
      tags:
        - usuarios
      summary: Eliminar un usuario
      description: Elimina un usuario por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Usuario eliminado correctamente
          content:
            application/json:
              schema:
                type: string
                example: "Usuario eliminado correctamente"
        '404':
          description: No se pudo eliminar el usuario
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo eliminar el usuario"

    put:
      tags:
        - usuarios
      summary: Modificar un usuario
      description: Modifica un usuario existente por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Usuario modificado exitosamente
          content:
            application/json:
              schema:
                type: string
                example: "Usuario modificado exitosamente"
        '400':
          description: No se pudo modificar el usuario
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo modificar el usuario"

  /usuarios:
    get:
      tags:
        - usuarios
      summary: Obtener todos los usuarios
      description: Devuelve una lista de todos los usuarios.
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuarioDTO'

  /usuarios/seguidores/{idUsuario}:
    get:
      tags:
        - usuarios
      summary: Obtener seguidores de un usuario
      description: Devuelve una lista de seguidores de un usuario específico.
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de seguidores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuarioDTO'
        '204':
          description: No hay seguidores
          content:
            application/json:
              schema:
                type: string
                example: "No hay seguidores"

  /usuarios/seguidos/{idUsuario}:
    get:
      tags:
        - usuarios
      summary: Obtener usuarios seguidos
      description: Devuelve una lista de usuarios seguidos por un usuario específico.
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de usuarios seguidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuarioDTO'
        '204':
          description: No hay usuarios seguidos
          content:
            application/json:
              schema:
                type: string
                example: "No hay usuarios seguidos"

  /usuarios/seguir/{idUsuarioASeguir}/{idSeguidor}:
    post:
      tags:
        - usuarios
      summary: Añadir un seguidor
      description: Añade un seguidor a un usuario específico.
      parameters:
        - name: idUsuarioASeguir
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idSeguidor
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Seguidor añadido correctamente
          content:
            application/json:
              schema:
                type: string
                example: "Seguidor añadido correctamente"
        '400':
          description: No se pudo añadir el seguidor
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo añadir el seguidor"

  /usuarios/login:
    post:
      tags:
        - usuarios
      summary: Iniciar sesión
      description: Inicia sesión y devuelve un token JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Token JWT generado
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzUxMiJ9..."
                  expiration:
                    type: string
                    format: date-time
                    example: "2025-03-04T12:32:08.000Z"
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                type: string
                example: "Credenciales inválidas"

  /usuarios/refresh-token:
    post:
      tags:
        - usuarios
      summary: Refrescar token JWT
      description: Refresca un token JWT existente.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Token JWT actual
      responses:
        '200':
          description: Nuevo token JWT generado
          content:
            application/json:
              schema:
                type: string
                example: "eyJhbGciOiJIUzUxMiJ9..."

  /publicaciones/crear:
    post:
      tags:
        - publicaciones
      summary: Crear una nueva publicación
      description: Crea una nueva publicación en el sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publicacion'
      responses:
        '201':
          description: Publicación creada exitosamente
          content:
            application/json:
              schema:
                type: string
                example: "Publicación creada exitosamente"
        '400':
          description: No se pudo crear la publicación
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo crear la publicación"

  /publicaciones/{id}:
    delete:
      tags:
        - publicaciones
      summary: Eliminar una publicación
      description: Elimina una publicación por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Publicación eliminada correctamente
          content:
            application/json:
              schema:
                type: string
                example: "Publicación eliminada correctamente"
        '404':
          description: No se pudo eliminar la publicación
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo eliminar la publicación"

    put:
      tags:
        - publicaciones
      summary: Modificar una publicación
      description: Modifica una publicación existente por su ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publicacion'
      responses:
        '200':
          description: Publicación modificada exitosamente
          content:
            application/json:
              schema:
                type: string
                example: "Publicación modificada exitosamente"
        '400':
          description: No se pudo modificar la publicación
          content:
            application/json:
              schema:
                type: string
                example: "No se pudo modificar la publicación"

  /publicaciones/usuario/{idUsuario}:
    get:
      tags:
        - publicaciones
      summary: Obtener publicaciones de un usuario
      description: Devuelve una lista de publicaciones de un usuario específico.
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de publicaciones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicacionDTO'
        '204':
          description: No hay publicaciones
          content:
            application/json:
              schema:
                type: string
                example: "No hay publicaciones"

  /publicaciones/{id}/comentarios:
    get:
      tags:
        - publicaciones
      summary: Obtener comentarios de una publicación
      description: Devuelve una lista de comentarios de una publicación específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de comentarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comentario'
        '204':
          description: No hay comentarios
          content:
            application/json:
              schema:
                type: string
                example: "No hay comentarios"

  /publicaciones/{id}/likes:
    get:
      tags:
        - publicaciones
      summary: Obtener likes de una publicación
      description: Devuelve una lista de likes de una publicación específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de likes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Likes'
        '204':
          description: No hay likes
          content:
            application/json:
              schema:
                type: string
                example: "No hay likes"

  /publicaciones:
    get:
      tags:
        - publicaciones
      summary: Obtener todas las publicaciones
      description: Devuelve una lista de todas las publicaciones.
      responses:
        '200':
          description: Lista de publicaciones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicacionDTO'
        '204':
          description: No hay publicaciones
          content:
            application/json:
              schema:
                type: string
                example: "No hay publicaciones"

components:
  schemas:
    Usuario:
      type: object
      properties:
        nombre:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          example: "juan@example.com"
        pass:
          type: string
          example: "password123"
        descripcion:
          type: string
          example: "Desarrollador backend"
        icono:
          type: string
          example: "https://example.com/icon.png"
        rol:
          type: string
          example: "USER"

    UsuarioDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nombre:
          type: string
          example: "Juan Pérez"
        descripcion:
          type: string
          example: "Desarrollador backend"
        icono:
          type: string
          example: "https://example.com/icon.png"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "juan@example.com"
        pass:
          type: string
          example: "password123"

    Publicacion:
      type: object
      properties:
        usuario:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
        contenido:
          type: object
          properties:
            texto:
              type: string
              example: "Mi primera publicación"
            imagen:
              type: string
              example: "https://example.com/image.png"
        fecha:
          type: string
          format: date-time
          example: "2025-03-04T12:32:08.000Z"

    PublicacionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        usuario:
          $ref: '#/components/schemas/UsuarioDTO'
        contenido:
          type: object
          properties:
            texto:
              type: string
              example: "Mi primera publicación"
            imagen:
              type: string
              example: "https://example.com/image.png"
        fecha:
          type: string
          format: date-time
          example: "2025-03-04T12:32:08.000Z"

    Comentario:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        texto:
          type: string
          example: "¡Gran publicación!"
        fecha:
          type: string
          format: date-time
          example: "2025-03-04T12:32:08.000Z"

    Likes:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        usuario:
          $ref: '#/components/schemas/UsuarioDTO'
        fecha:
          type: string
          format: date-time
          example: "2025-03-04T12:32:08.000Z"